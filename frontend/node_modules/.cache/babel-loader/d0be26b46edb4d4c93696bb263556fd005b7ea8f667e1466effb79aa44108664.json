{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\catur-indonesia\\\\frontend\\\\src\\\\components\\\\ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  gameState,\n  onMove,\n  currentPlayer,\n  isPlayerTurn,\n  gameResult\n}) => {\n  _s();\n  const [selectedSquare, setSelectedSquare] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState([]);\n\n  // Inisialisasi papan catur 8x8\n  const initialBoard = [['♜', '♞', '♝', '♛', '♚', '♝', '♞', '♜'], ['♟', '♟', '♟', '♟', '♟', '♟', '♟', '♟'], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], ['♙', '♙', '♙', '♙', '♙', '♙', '♙', '♙'], ['♖', '♘', '♗', '♕', '♔', '♗', '♘', '♖']];\n  const [board, setBoard] = useState((gameState === null || gameState === void 0 ? void 0 : gameState.board) || initialBoard);\n  useEffect(() => {\n    if (gameState !== null && gameState !== void 0 && gameState.board) {\n      setBoard(gameState.board);\n    }\n  }, [gameState]);\n\n  // Reset selected square ketika game selesai\n  useEffect(() => {\n    if (gameResult) {\n      setSelectedSquare(null);\n      setPossibleMoves([]);\n    }\n  }, [gameResult]);\n\n  // Fungsi untuk menentukan warna buah catur\n  const getPieceColor = piece => {\n    const whitePieces = ['♙', '♖', '♘', '♗', '♕', '♔'];\n    const blackPieces = ['♟', '♜', '♞', '♝', '♛', '♚'];\n    if (whitePieces.includes(piece)) return 'white';\n    if (blackPieces.includes(piece)) return 'black';\n    return null;\n  };\n\n  // Fungsi untuk validasi gerakan berdasarkan jenis buah (diperbaiki)\n  const isValidMove = (fromRow, fromCol, toRow, toCol, piece) => {\n    // Pastikan tidak keluar dari papan\n    if (toRow < 0 || toRow > 7 || toCol < 0 || toCol > 7) return false;\n\n    // Tidak bisa stay di tempat yang sama\n    if (fromRow === toRow && fromCol === toCol) return false;\n\n    // Tidak bisa memakan buah sendiri\n    const targetPiece = board[toRow][toCol];\n    if (targetPiece && getPieceColor(piece) === getPieceColor(targetPiece)) {\n      return false;\n    }\n    const rowDiff = Math.abs(toRow - fromRow);\n    const colDiff = Math.abs(toCol - fromCol);\n    switch (piece) {\n      case '♙':\n        // Pion putih\n        // Gerakan maju dua langkah dari posisi awal\n        if (fromRow === 6 && toRow === 4 && fromCol === toCol && !board[5][toCol] && !board[4][toCol]) return true;\n        // Gerakan maju satu langkah\n        if (toRow === fromRow - 1 && fromCol === toCol && !targetPiece) return true;\n        // Memakan diagonal\n        if (toRow === fromRow - 1 && Math.abs(toCol - fromCol) === 1 && targetPiece && getPieceColor(targetPiece) === 'black') return true;\n        return false;\n      case '♟':\n        // Pion hitam\n        // Gerakan maju dua langkah dari posisi awal\n        if (fromRow === 1 && toRow === 3 && fromCol === toCol && !board[2][toCol] && !board[3][toCol]) return true;\n        // Gerakan maju satu langkah\n        if (toRow === fromRow + 1 && fromCol === toCol && !targetPiece) return true;\n        // Memakan diagonal\n        if (toRow === fromRow + 1 && Math.abs(toCol - fromCol) === 1 && targetPiece && getPieceColor(targetPiece) === 'white') return true;\n        return false;\n      case '♖':\n      case '♜':\n        // Benteng\n        if (fromRow !== toRow && fromCol !== toCol) return false;\n        return isPathClear(fromRow, fromCol, toRow, toCol);\n      case '♗':\n      case '♝':\n        // Gajah\n        if (rowDiff !== colDiff) return false;\n        return isPathClear(fromRow, fromCol, toRow, toCol);\n      case '♘':\n      case '♞':\n        // Kuda\n        return rowDiff === 2 && colDiff === 1 || rowDiff === 1 && colDiff === 2;\n      case '♕':\n      case '♛':\n        // Ratu\n        if (fromRow !== toRow && fromCol !== toCol && rowDiff !== colDiff) return false;\n        return isPathClear(fromRow, fromCol, toRow, toCol);\n      case '♔':\n      case '♚':\n        // Raja\n        return rowDiff <= 1 && colDiff <= 1;\n      default:\n        return false;\n    }\n  };\n\n  // Fungsi untuk mengecek apakah jalur kosong (diperbaiki)\n  const isPathClear = (fromRow, fromCol, toRow, toCol) => {\n    const rowDirection = toRow > fromRow ? 1 : toRow < fromRow ? -1 : 0;\n    const colDirection = toCol > fromCol ? 1 : toCol < fromCol ? -1 : 0;\n    let currentRow = fromRow + rowDirection;\n    let currentCol = fromCol + colDirection;\n    while (currentRow !== toRow || currentCol !== toCol) {\n      if (board[currentRow][currentCol] !== null) return false;\n      currentRow += rowDirection;\n      currentCol += colDirection;\n    }\n    return true;\n  };\n\n  // Fungsi untuk mendapatkan semua gerakan yang mungkin\n  const getPossibleMoves = (row, col, piece) => {\n    const moves = [];\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        if (isValidMove(row, col, r, c, piece)) {\n          moves.push([r, c]);\n        }\n      }\n    }\n    return moves;\n  };\n  const handleSquareClick = (row, col) => {\n    // Tidak bisa bergerak jika game sudah selesai\n    if (gameResult) return;\n\n    // Hanya izinkan gerakan jika giliran pemain\n    if (!isPlayerTurn && (gameState === null || gameState === void 0 ? void 0 : gameState.gameType) === 'bot') return;\n    if (selectedSquare) {\n      const [selectedRow, selectedCol] = selectedSquare;\n      const piece = board[selectedRow][selectedCol];\n\n      // Cek apakah gerakan valid\n      if (isValidMove(selectedRow, selectedCol, row, col, piece)) {\n        // Buat salinan papan baru\n        const newBoard = board.map(row => [...row]);\n        newBoard[row][col] = newBoard[selectedRow][selectedCol];\n        newBoard[selectedRow][selectedCol] = null;\n\n        // Update state lokal terlebih dahulu untuk responsivitas\n        setBoard(newBoard);\n        setSelectedSquare(null);\n        setPossibleMoves([]);\n\n        // Kirim gerakan ke parent component\n        if (onMove) {\n          onMove({\n            from: [selectedRow, selectedCol],\n            to: [row, col],\n            board: newBoard,\n            piece: piece\n          });\n        }\n      } else {\n        // Jika gerakan tidak valid, pilih kotak baru jika ada buah yang bisa dimainkan\n        if (board[row][col] && getPieceColor(board[row][col]) === currentPlayer) {\n          setSelectedSquare([row, col]);\n          setPossibleMoves(getPossibleMoves(row, col, board[row][col]));\n        } else {\n          setSelectedSquare(null);\n          setPossibleMoves([]);\n        }\n      }\n    } else if (board[row][col]) {\n      // Hanya izinkan memilih buah sesuai giliran\n      if (getPieceColor(board[row][col]) === currentPlayer) {\n        setSelectedSquare([row, col]);\n        setPossibleMoves(getPossibleMoves(row, col, board[row][col]));\n      }\n    }\n  };\n  const getSquareColor = (row, col) => {\n    const isLight = (row + col) % 2 === 0;\n    const isSelected = selectedSquare && selectedSquare[0] === row && selectedSquare[1] === col;\n    const isPossibleMove = possibleMoves.some(move => move[0] === row && move[1] === col);\n    if (isSelected) return 'bg-yellow-400';\n    if (isPossibleMove) return 'bg-green-300';\n    return isLight ? 'bg-amber-100' : 'bg-amber-600';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chess-board-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Giliran: \", currentPlayer === 'white' ? 'Putih' : 'Hitam']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), (gameState === null || gameState === void 0 ? void 0 : gameState.gameType) === 'bot' && !gameResult && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: isPlayerTurn ? 'Giliran Anda' : 'Bot sedang berpikir...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), gameResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `game-status ${gameResult.isPlayerWin ? 'winner' : 'loser'}`,\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: gameResult.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chess-board\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chess-row\",\n        children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chess-square ${getSquareColor(rowIndex, colIndex)} ${gameResult ? 'game-over' : ''}`,\n          onClick: () => handleSquareClick(rowIndex, colIndex),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chess-piece\",\n            children: piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 17\n          }, this)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"hgzgzEDoDdQjej7vsW/qjom8W1E=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChessBoard","gameState","onMove","currentPlayer","isPlayerTurn","gameResult","_s","selectedSquare","setSelectedSquare","possibleMoves","setPossibleMoves","initialBoard","board","setBoard","getPieceColor","piece","whitePieces","blackPieces","includes","isValidMove","fromRow","fromCol","toRow","toCol","targetPiece","rowDiff","Math","abs","colDiff","isPathClear","rowDirection","colDirection","currentRow","currentCol","getPossibleMoves","row","col","moves","r","c","push","handleSquareClick","gameType","selectedRow","selectedCol","newBoard","map","from","to","getSquareColor","isLight","isSelected","isPossibleMove","some","move","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isPlayerWin","message","rowIndex","colIndex","onClick","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/catur-indonesia/frontend/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ChessBoard = ({ gameState, onMove, currentPlayer, isPlayerTurn, gameResult }) => {\r\n  const [selectedSquare, setSelectedSquare] = useState(null);\r\n  const [possibleMoves, setPossibleMoves] = useState([]);\r\n  \r\n  // Inisialisasi papan catur 8x8\r\n  const initialBoard = [\r\n    ['♜', '♞', '♝', '♛', '♚', '♝', '♞', '♜'],\r\n    ['♟', '♟', '♟', '♟', '♟', '♟', '♟', '♟'],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    ['♙', '♙', '♙', '♙', '♙', '♙', '♙', '♙'],\r\n    ['♖', '♘', '♗', '♕', '♔', '♗', '♘', '♖']\r\n  ];\r\n\r\n  const [board, setBoard] = useState(gameState?.board || initialBoard);\r\n\r\n  useEffect(() => {\r\n    if (gameState?.board) {\r\n      setBoard(gameState.board);\r\n    }\r\n  }, [gameState]);\r\n\r\n  // Reset selected square ketika game selesai\r\n  useEffect(() => {\r\n    if (gameResult) {\r\n      setSelectedSquare(null);\r\n      setPossibleMoves([]);\r\n    }\r\n  }, [gameResult]);\r\n\r\n  // Fungsi untuk menentukan warna buah catur\r\n  const getPieceColor = (piece) => {\r\n    const whitePieces = ['♙', '♖', '♘', '♗', '♕', '♔'];\r\n    const blackPieces = ['♟', '♜', '♞', '♝', '♛', '♚'];\r\n    \r\n    if (whitePieces.includes(piece)) return 'white';\r\n    if (blackPieces.includes(piece)) return 'black';\r\n    return null;\r\n  };\r\n\r\n  // Fungsi untuk validasi gerakan berdasarkan jenis buah (diperbaiki)\r\n  const isValidMove = (fromRow, fromCol, toRow, toCol, piece) => {\r\n    // Pastikan tidak keluar dari papan\r\n    if (toRow < 0 || toRow > 7 || toCol < 0 || toCol > 7) return false;\r\n    \r\n    // Tidak bisa stay di tempat yang sama\r\n    if (fromRow === toRow && fromCol === toCol) return false;\r\n    \r\n    // Tidak bisa memakan buah sendiri\r\n    const targetPiece = board[toRow][toCol];\r\n    if (targetPiece && getPieceColor(piece) === getPieceColor(targetPiece)) {\r\n      return false;\r\n    }\r\n\r\n    const rowDiff = Math.abs(toRow - fromRow);\r\n    const colDiff = Math.abs(toCol - fromCol);\r\n\r\n    switch (piece) {\r\n      case '♙': // Pion putih\r\n        // Gerakan maju dua langkah dari posisi awal\r\n        if (fromRow === 6 && toRow === 4 && fromCol === toCol && !board[5][toCol] && !board[4][toCol]) return true;\r\n        // Gerakan maju satu langkah\r\n        if (toRow === fromRow - 1 && fromCol === toCol && !targetPiece) return true;\r\n        // Memakan diagonal\r\n        if (toRow === fromRow - 1 && Math.abs(toCol - fromCol) === 1 && targetPiece && getPieceColor(targetPiece) === 'black') return true;\r\n        return false;\r\n      \r\n      case '♟': // Pion hitam\r\n        // Gerakan maju dua langkah dari posisi awal\r\n        if (fromRow === 1 && toRow === 3 && fromCol === toCol && !board[2][toCol] && !board[3][toCol]) return true;\r\n        // Gerakan maju satu langkah\r\n        if (toRow === fromRow + 1 && fromCol === toCol && !targetPiece) return true;\r\n        // Memakan diagonal\r\n        if (toRow === fromRow + 1 && Math.abs(toCol - fromCol) === 1 && targetPiece && getPieceColor(targetPiece) === 'white') return true;\r\n        return false;\r\n      \r\n      case '♖':\r\n      case '♜': // Benteng\r\n        if (fromRow !== toRow && fromCol !== toCol) return false;\r\n        return isPathClear(fromRow, fromCol, toRow, toCol);\r\n      \r\n      case '♗':\r\n      case '♝': // Gajah\r\n        if (rowDiff !== colDiff) return false;\r\n        return isPathClear(fromRow, fromCol, toRow, toCol);\r\n      \r\n      case '♘':\r\n      case '♞': // Kuda\r\n        return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);\r\n      \r\n      case '♕':\r\n      case '♛': // Ratu\r\n        if (fromRow !== toRow && fromCol !== toCol && rowDiff !== colDiff) return false;\r\n        return isPathClear(fromRow, fromCol, toRow, toCol);\r\n      \r\n      case '♔':\r\n      case '♚': // Raja\r\n        return rowDiff <= 1 && colDiff <= 1;\r\n      \r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  // Fungsi untuk mengecek apakah jalur kosong (diperbaiki)\r\n  const isPathClear = (fromRow, fromCol, toRow, toCol) => {\r\n    const rowDirection = toRow > fromRow ? 1 : toRow < fromRow ? -1 : 0;\r\n    const colDirection = toCol > fromCol ? 1 : toCol < fromCol ? -1 : 0;\r\n    \r\n    let currentRow = fromRow + rowDirection;\r\n    let currentCol = fromCol + colDirection;\r\n    \r\n    while (currentRow !== toRow || currentCol !== toCol) {\r\n      if (board[currentRow][currentCol] !== null) return false;\r\n      currentRow += rowDirection;\r\n      currentCol += colDirection;\r\n    }\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Fungsi untuk mendapatkan semua gerakan yang mungkin\r\n  const getPossibleMoves = (row, col, piece) => {\r\n    const moves = [];\r\n    for (let r = 0; r < 8; r++) {\r\n      for (let c = 0; c < 8; c++) {\r\n        if (isValidMove(row, col, r, c, piece)) {\r\n          moves.push([r, c]);\r\n        }\r\n      }\r\n    }\r\n    return moves;\r\n  };\r\n\r\n  const handleSquareClick = (row, col) => {\r\n    // Tidak bisa bergerak jika game sudah selesai\r\n    if (gameResult) return;\r\n    \r\n    // Hanya izinkan gerakan jika giliran pemain\r\n    if (!isPlayerTurn && gameState?.gameType === 'bot') return;\r\n    \r\n    if (selectedSquare) {\r\n      const [selectedRow, selectedCol] = selectedSquare;\r\n      const piece = board[selectedRow][selectedCol];\r\n      \r\n      // Cek apakah gerakan valid\r\n      if (isValidMove(selectedRow, selectedCol, row, col, piece)) {\r\n        // Buat salinan papan baru\r\n        const newBoard = board.map(row => [...row]);\r\n        newBoard[row][col] = newBoard[selectedRow][selectedCol];\r\n        newBoard[selectedRow][selectedCol] = null;\r\n        \r\n        // Update state lokal terlebih dahulu untuk responsivitas\r\n        setBoard(newBoard);\r\n        setSelectedSquare(null);\r\n        setPossibleMoves([]);\r\n        \r\n        // Kirim gerakan ke parent component\r\n        if (onMove) {\r\n          onMove({\r\n            from: [selectedRow, selectedCol],\r\n            to: [row, col],\r\n            board: newBoard,\r\n            piece: piece\r\n          });\r\n        }\r\n      } else {\r\n        // Jika gerakan tidak valid, pilih kotak baru jika ada buah yang bisa dimainkan\r\n        if (board[row][col] && getPieceColor(board[row][col]) === currentPlayer) {\r\n          setSelectedSquare([row, col]);\r\n          setPossibleMoves(getPossibleMoves(row, col, board[row][col]));\r\n        } else {\r\n          setSelectedSquare(null);\r\n          setPossibleMoves([]);\r\n        }\r\n      }\r\n    } else if (board[row][col]) {\r\n      // Hanya izinkan memilih buah sesuai giliran\r\n      if (getPieceColor(board[row][col]) === currentPlayer) {\r\n        setSelectedSquare([row, col]);\r\n        setPossibleMoves(getPossibleMoves(row, col, board[row][col]));\r\n      }\r\n    }\r\n  };\r\n\r\n  const getSquareColor = (row, col) => {\r\n    const isLight = (row + col) % 2 === 0;\r\n    const isSelected = selectedSquare && selectedSquare[0] === row && selectedSquare[1] === col;\r\n    const isPossibleMove = possibleMoves.some(move => move[0] === row && move[1] === col);\r\n    \r\n    if (isSelected) return 'bg-yellow-400';\r\n    if (isPossibleMove) return 'bg-green-300';\r\n    return isLight ? 'bg-amber-100' : 'bg-amber-600';\r\n  };\r\n\r\n  return (\r\n    <div className=\"chess-board-container\">\r\n      <div className=\"game-info\">\r\n        <h3>Giliran: {currentPlayer === 'white' ? 'Putih' : 'Hitam'}</h3>\r\n        {gameState?.gameType === 'bot' && !gameResult && (\r\n          <p>{isPlayerTurn ? 'Giliran Anda' : 'Bot sedang berpikir...'}</p>\r\n        )}\r\n        {gameResult && (\r\n          <div className={`game-status ${gameResult.isPlayerWin ? 'winner' : 'loser'}`}>\r\n            <h3>{gameResult.message}</h3>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"chess-board\">\r\n        {board.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"chess-row\">\r\n            {row.map((piece, colIndex) => (\r\n              <div\r\n                key={`${rowIndex}-${colIndex}`}\r\n                className={`chess-square ${getSquareColor(rowIndex, colIndex)} ${gameResult ? 'game-over' : ''}`}\r\n                onClick={() => handleSquareClick(rowIndex, colIndex)}\r\n              >\r\n                <span className=\"chess-piece\">{piece}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}