{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const ChessBoard=_ref=>{let{gameState,onMove,currentPlayer,isPlayerTurn,gameResult}=_ref;const[selectedSquare,setSelectedSquare]=useState(null);const[possibleMoves,setPossibleMoves]=useState([]);// Inisialisasi papan catur 8x8\nconst initialBoard=[['♜','♞','♝','♛','♚','♝','♞','♜'],['♟','♟','♟','♟','♟','♟','♟','♟'],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],['♙','♙','♙','♙','♙','♙','♙','♙'],['♖','♘','♗','♕','♔','♗','♘','♖']];const[board,setBoard]=useState((gameState===null||gameState===void 0?void 0:gameState.board)||initialBoard);useEffect(()=>{if(gameState!==null&&gameState!==void 0&&gameState.board){setBoard(gameState.board);}},[gameState]);// Reset selected square ketika game selesai\nuseEffect(()=>{if(gameResult){setSelectedSquare(null);setPossibleMoves([]);}},[gameResult]);// Fungsi untuk menentukan warna buah catur\nconst getPieceColor=piece=>{const whitePieces=['♙','♖','♘','♗','♕','♔'];const blackPieces=['♟','♜','♞','♝','♛','♚'];if(whitePieces.includes(piece))return'white';if(blackPieces.includes(piece))return'black';return null;};// Fungsi untuk validasi gerakan berdasarkan jenis buah (diperbaiki)\nconst isValidMove=(fromRow,fromCol,toRow,toCol,piece)=>{// Pastikan tidak keluar dari papan\nif(toRow<0||toRow>7||toCol<0||toCol>7)return false;// Tidak bisa stay di tempat yang sama\nif(fromRow===toRow&&fromCol===toCol)return false;// Tidak bisa memakan buah sendiri\nconst targetPiece=board[toRow][toCol];if(targetPiece&&getPieceColor(piece)===getPieceColor(targetPiece)){return false;}const rowDiff=Math.abs(toRow-fromRow);const colDiff=Math.abs(toCol-fromCol);switch(piece){case'♙':// Pion putih\n// Gerakan maju dua langkah dari posisi awal\nif(fromRow===6&&toRow===4&&fromCol===toCol&&!board[5][toCol]&&!board[4][toCol])return true;// Gerakan maju satu langkah\nif(toRow===fromRow-1&&fromCol===toCol&&!targetPiece)return true;// Memakan diagonal\nif(toRow===fromRow-1&&Math.abs(toCol-fromCol)===1&&targetPiece&&getPieceColor(targetPiece)==='black')return true;return false;case'♟':// Pion hitam\n// Gerakan maju dua langkah dari posisi awal\nif(fromRow===1&&toRow===3&&fromCol===toCol&&!board[2][toCol]&&!board[3][toCol])return true;// Gerakan maju satu langkah\nif(toRow===fromRow+1&&fromCol===toCol&&!targetPiece)return true;// Memakan diagonal\nif(toRow===fromRow+1&&Math.abs(toCol-fromCol)===1&&targetPiece&&getPieceColor(targetPiece)==='white')return true;return false;case'♖':case'♜':// Benteng\nif(fromRow!==toRow&&fromCol!==toCol)return false;return isPathClear(fromRow,fromCol,toRow,toCol);case'♗':case'♝':// Gajah\nif(rowDiff!==colDiff)return false;return isPathClear(fromRow,fromCol,toRow,toCol);case'♘':case'♞':// Kuda\nreturn rowDiff===2&&colDiff===1||rowDiff===1&&colDiff===2;case'♕':case'♛':// Ratu\nif(fromRow!==toRow&&fromCol!==toCol&&rowDiff!==colDiff)return false;return isPathClear(fromRow,fromCol,toRow,toCol);case'♔':case'♚':// Raja\nreturn rowDiff<=1&&colDiff<=1;default:return false;}};// Fungsi untuk mengecek apakah jalur kosong (diperbaiki)\nconst isPathClear=(fromRow,fromCol,toRow,toCol)=>{const rowDirection=toRow>fromRow?1:toRow<fromRow?-1:0;const colDirection=toCol>fromCol?1:toCol<fromCol?-1:0;let currentRow=fromRow+rowDirection;let currentCol=fromCol+colDirection;while(currentRow!==toRow||currentCol!==toCol){if(board[currentRow][currentCol]!==null)return false;currentRow+=rowDirection;currentCol+=colDirection;}return true;};// Fungsi untuk mendapatkan semua gerakan yang mungkin\nconst getPossibleMoves=(row,col,piece)=>{const moves=[];for(let r=0;r<8;r++){for(let c=0;c<8;c++){if(isValidMove(row,col,r,c,piece)){moves.push([r,c]);}}}return moves;};const handleSquareClick=(row,col)=>{// Tidak bisa bergerak jika game sudah selesai\nif(gameResult)return;// Hanya izinkan gerakan jika giliran pemain\nif(!isPlayerTurn&&(gameState===null||gameState===void 0?void 0:gameState.gameType)==='bot')return;if(selectedSquare){const[selectedRow,selectedCol]=selectedSquare;const piece=board[selectedRow][selectedCol];// Cek apakah gerakan valid\nif(isValidMove(selectedRow,selectedCol,row,col,piece)){// Buat salinan papan baru\nconst newBoard=board.map(row=>[...row]);newBoard[row][col]=newBoard[selectedRow][selectedCol];newBoard[selectedRow][selectedCol]=null;// Update state lokal terlebih dahulu untuk responsivitas\nsetBoard(newBoard);setSelectedSquare(null);setPossibleMoves([]);// Kirim gerakan ke parent component\nif(onMove){onMove({from:[selectedRow,selectedCol],to:[row,col],board:newBoard,piece:piece});}}else{// Jika gerakan tidak valid, pilih kotak baru jika ada buah yang bisa dimainkan\nif(board[row][col]&&getPieceColor(board[row][col])===currentPlayer){setSelectedSquare([row,col]);setPossibleMoves(getPossibleMoves(row,col,board[row][col]));}else{setSelectedSquare(null);setPossibleMoves([]);}}}else if(board[row][col]){// Hanya izinkan memilih buah sesuai giliran\nif(getPieceColor(board[row][col])===currentPlayer){setSelectedSquare([row,col]);setPossibleMoves(getPossibleMoves(row,col,board[row][col]));}}};const getSquareColor=(row,col)=>{const isLight=(row+col)%2===0;const isSelected=selectedSquare&&selectedSquare[0]===row&&selectedSquare[1]===col;const isPossibleMove=possibleMoves.some(move=>move[0]===row&&move[1]===col);if(isSelected)return'bg-yellow-400';if(isPossibleMove)return'bg-green-300';return isLight?'bg-amber-100':'bg-amber-600';};return/*#__PURE__*/_jsxs(\"div\",{className:\"chess-board-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"game-info\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Giliran: \",currentPlayer==='white'?'Putih':'Hitam']}),(gameState===null||gameState===void 0?void 0:gameState.gameType)==='bot'&&!gameResult&&/*#__PURE__*/_jsx(\"p\",{children:isPlayerTurn?'Giliran Anda':'Bot sedang berpikir...'}),gameResult&&/*#__PURE__*/_jsx(\"div\",{className:\"game-status \".concat(gameResult.isPlayerWin?'winner':'loser'),children:/*#__PURE__*/_jsx(\"h3\",{children:gameResult.message})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chess-board\",children:board.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"chess-row\",children:row.map((piece,colIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"chess-square \".concat(getSquareColor(rowIndex,colIndex),\" \").concat(gameResult?'game-over':''),onClick:()=>handleSquareClick(rowIndex,colIndex),children:/*#__PURE__*/_jsx(\"span\",{className:\"chess-piece\",children:piece})},\"\".concat(rowIndex,\"-\").concat(colIndex)))},rowIndex))})]});};export default ChessBoard;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","ChessBoard","_ref","gameState","onMove","currentPlayer","isPlayerTurn","gameResult","selectedSquare","setSelectedSquare","possibleMoves","setPossibleMoves","initialBoard","board","setBoard","getPieceColor","piece","whitePieces","blackPieces","includes","isValidMove","fromRow","fromCol","toRow","toCol","targetPiece","rowDiff","Math","abs","colDiff","isPathClear","rowDirection","colDirection","currentRow","currentCol","getPossibleMoves","row","col","moves","r","c","push","handleSquareClick","gameType","selectedRow","selectedCol","newBoard","map","from","to","getSquareColor","isLight","isSelected","isPossibleMove","some","move","className","children","concat","isPlayerWin","message","rowIndex","colIndex","onClick"],"sources":["C:/xampp/htdocs/catur-indonesia/frontend/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ChessBoard = ({ gameState, onMove, currentPlayer, isPlayerTurn, gameResult }) => {\r\n  const [selectedSquare, setSelectedSquare] = useState(null);\r\n  const [possibleMoves, setPossibleMoves] = useState([]);\r\n  \r\n  // Inisialisasi papan catur 8x8\r\n  const initialBoard = [\r\n    ['♜', '♞', '♝', '♛', '♚', '♝', '♞', '♜'],\r\n    ['♟', '♟', '♟', '♟', '♟', '♟', '♟', '♟'],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null, null],\r\n    ['♙', '♙', '♙', '♙', '♙', '♙', '♙', '♙'],\r\n    ['♖', '♘', '♗', '♕', '♔', '♗', '♘', '♖']\r\n  ];\r\n\r\n  const [board, setBoard] = useState(gameState?.board || initialBoard);\r\n\r\n  useEffect(() => {\r\n    if (gameState?.board) {\r\n      setBoard(gameState.board);\r\n    }\r\n  }, [gameState]);\r\n\r\n  // Reset selected square ketika game selesai\r\n  useEffect(() => {\r\n    if (gameResult) {\r\n      setSelectedSquare(null);\r\n      setPossibleMoves([]);\r\n    }\r\n  }, [gameResult]);\r\n\r\n  // Fungsi untuk menentukan warna buah catur\r\n  const getPieceColor = (piece) => {\r\n    const whitePieces = ['♙', '♖', '♘', '♗', '♕', '♔'];\r\n    const blackPieces = ['♟', '♜', '♞', '♝', '♛', '♚'];\r\n    \r\n    if (whitePieces.includes(piece)) return 'white';\r\n    if (blackPieces.includes(piece)) return 'black';\r\n    return null;\r\n  };\r\n\r\n  // Fungsi untuk validasi gerakan berdasarkan jenis buah (diperbaiki)\r\n  const isValidMove = (fromRow, fromCol, toRow, toCol, piece) => {\r\n    // Pastikan tidak keluar dari papan\r\n    if (toRow < 0 || toRow > 7 || toCol < 0 || toCol > 7) return false;\r\n    \r\n    // Tidak bisa stay di tempat yang sama\r\n    if (fromRow === toRow && fromCol === toCol) return false;\r\n    \r\n    // Tidak bisa memakan buah sendiri\r\n    const targetPiece = board[toRow][toCol];\r\n    if (targetPiece && getPieceColor(piece) === getPieceColor(targetPiece)) {\r\n      return false;\r\n    }\r\n\r\n    const rowDiff = Math.abs(toRow - fromRow);\r\n    const colDiff = Math.abs(toCol - fromCol);\r\n\r\n    switch (piece) {\r\n      case '♙': // Pion putih\r\n        // Gerakan maju dua langkah dari posisi awal\r\n        if (fromRow === 6 && toRow === 4 && fromCol === toCol && !board[5][toCol] && !board[4][toCol]) return true;\r\n        // Gerakan maju satu langkah\r\n        if (toRow === fromRow - 1 && fromCol === toCol && !targetPiece) return true;\r\n        // Memakan diagonal\r\n        if (toRow === fromRow - 1 && Math.abs(toCol - fromCol) === 1 && targetPiece && getPieceColor(targetPiece) === 'black') return true;\r\n        return false;\r\n      \r\n      case '♟': // Pion hitam\r\n        // Gerakan maju dua langkah dari posisi awal\r\n        if (fromRow === 1 && toRow === 3 && fromCol === toCol && !board[2][toCol] && !board[3][toCol]) return true;\r\n        // Gerakan maju satu langkah\r\n        if (toRow === fromRow + 1 && fromCol === toCol && !targetPiece) return true;\r\n        // Memakan diagonal\r\n        if (toRow === fromRow + 1 && Math.abs(toCol - fromCol) === 1 && targetPiece && getPieceColor(targetPiece) === 'white') return true;\r\n        return false;\r\n      \r\n      case '♖':\r\n      case '♜': // Benteng\r\n        if (fromRow !== toRow && fromCol !== toCol) return false;\r\n        return isPathClear(fromRow, fromCol, toRow, toCol);\r\n      \r\n      case '♗':\r\n      case '♝': // Gajah\r\n        if (rowDiff !== colDiff) return false;\r\n        return isPathClear(fromRow, fromCol, toRow, toCol);\r\n      \r\n      case '♘':\r\n      case '♞': // Kuda\r\n        return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);\r\n      \r\n      case '♕':\r\n      case '♛': // Ratu\r\n        if (fromRow !== toRow && fromCol !== toCol && rowDiff !== colDiff) return false;\r\n        return isPathClear(fromRow, fromCol, toRow, toCol);\r\n      \r\n      case '♔':\r\n      case '♚': // Raja\r\n        return rowDiff <= 1 && colDiff <= 1;\r\n      \r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  // Fungsi untuk mengecek apakah jalur kosong (diperbaiki)\r\n  const isPathClear = (fromRow, fromCol, toRow, toCol) => {\r\n    const rowDirection = toRow > fromRow ? 1 : toRow < fromRow ? -1 : 0;\r\n    const colDirection = toCol > fromCol ? 1 : toCol < fromCol ? -1 : 0;\r\n    \r\n    let currentRow = fromRow + rowDirection;\r\n    let currentCol = fromCol + colDirection;\r\n    \r\n    while (currentRow !== toRow || currentCol !== toCol) {\r\n      if (board[currentRow][currentCol] !== null) return false;\r\n      currentRow += rowDirection;\r\n      currentCol += colDirection;\r\n    }\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Fungsi untuk mendapatkan semua gerakan yang mungkin\r\n  const getPossibleMoves = (row, col, piece) => {\r\n    const moves = [];\r\n    for (let r = 0; r < 8; r++) {\r\n      for (let c = 0; c < 8; c++) {\r\n        if (isValidMove(row, col, r, c, piece)) {\r\n          moves.push([r, c]);\r\n        }\r\n      }\r\n    }\r\n    return moves;\r\n  };\r\n\r\n  const handleSquareClick = (row, col) => {\r\n    // Tidak bisa bergerak jika game sudah selesai\r\n    if (gameResult) return;\r\n    \r\n    // Hanya izinkan gerakan jika giliran pemain\r\n    if (!isPlayerTurn && gameState?.gameType === 'bot') return;\r\n    \r\n    if (selectedSquare) {\r\n      const [selectedRow, selectedCol] = selectedSquare;\r\n      const piece = board[selectedRow][selectedCol];\r\n      \r\n      // Cek apakah gerakan valid\r\n      if (isValidMove(selectedRow, selectedCol, row, col, piece)) {\r\n        // Buat salinan papan baru\r\n        const newBoard = board.map(row => [...row]);\r\n        newBoard[row][col] = newBoard[selectedRow][selectedCol];\r\n        newBoard[selectedRow][selectedCol] = null;\r\n        \r\n        // Update state lokal terlebih dahulu untuk responsivitas\r\n        setBoard(newBoard);\r\n        setSelectedSquare(null);\r\n        setPossibleMoves([]);\r\n        \r\n        // Kirim gerakan ke parent component\r\n        if (onMove) {\r\n          onMove({\r\n            from: [selectedRow, selectedCol],\r\n            to: [row, col],\r\n            board: newBoard,\r\n            piece: piece\r\n          });\r\n        }\r\n      } else {\r\n        // Jika gerakan tidak valid, pilih kotak baru jika ada buah yang bisa dimainkan\r\n        if (board[row][col] && getPieceColor(board[row][col]) === currentPlayer) {\r\n          setSelectedSquare([row, col]);\r\n          setPossibleMoves(getPossibleMoves(row, col, board[row][col]));\r\n        } else {\r\n          setSelectedSquare(null);\r\n          setPossibleMoves([]);\r\n        }\r\n      }\r\n    } else if (board[row][col]) {\r\n      // Hanya izinkan memilih buah sesuai giliran\r\n      if (getPieceColor(board[row][col]) === currentPlayer) {\r\n        setSelectedSquare([row, col]);\r\n        setPossibleMoves(getPossibleMoves(row, col, board[row][col]));\r\n      }\r\n    }\r\n  };\r\n\r\n  const getSquareColor = (row, col) => {\r\n    const isLight = (row + col) % 2 === 0;\r\n    const isSelected = selectedSquare && selectedSquare[0] === row && selectedSquare[1] === col;\r\n    const isPossibleMove = possibleMoves.some(move => move[0] === row && move[1] === col);\r\n    \r\n    if (isSelected) return 'bg-yellow-400';\r\n    if (isPossibleMove) return 'bg-green-300';\r\n    return isLight ? 'bg-amber-100' : 'bg-amber-600';\r\n  };\r\n\r\n  return (\r\n    <div className=\"chess-board-container\">\r\n      <div className=\"game-info\">\r\n        <h3>Giliran: {currentPlayer === 'white' ? 'Putih' : 'Hitam'}</h3>\r\n        {gameState?.gameType === 'bot' && !gameResult && (\r\n          <p>{isPlayerTurn ? 'Giliran Anda' : 'Bot sedang berpikir...'}</p>\r\n        )}\r\n        {gameResult && (\r\n          <div className={`game-status ${gameResult.isPlayerWin ? 'winner' : 'loser'}`}>\r\n            <h3>{gameResult.message}</h3>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"chess-board\">\r\n        {board.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"chess-row\">\r\n            {row.map((piece, colIndex) => (\r\n              <div\r\n                key={`${rowIndex}-${colIndex}`}\r\n                className={`chess-square ${getSquareColor(rowIndex, colIndex)} ${gameResult ? 'game-over' : ''}`}\r\n                onClick={() => handleSquareClick(rowIndex, colIndex)}\r\n              >\r\n                <span className=\"chess-piece\">{piece}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}